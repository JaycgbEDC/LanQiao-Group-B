题目描述
下图给出了一个迷宫的平面图，其中标记为1 的为障碍，标记为0 的为可
以通行的地方。
010000
000100
001001
110000
迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这
个它的上、下、左、右四个方向之一。
对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫，
一共10 步。其中D、U、L、R 分别表示向下、向上、向左、向右走。
对于下面这个更复杂的迷宫（30 行50 列），请找出一种通过迷宫的方式，
其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。
请注意在字典序中D<L<R<U。
输入：
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010001001000100010101
10100001000110010001000010101001010101011111010010
00000100101000000110010100101001000001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000

1.dfs:
//假定向右为X正方向、向下为Y正方向
#include <iostream>
#include <cstring>
#include <math.h>
using namespace std;


const int expo = pow(10, 6);//pow(x,y)表示求x的y次方 
int maze[40][60], maze_min[40][60], minn = expo;//maze数组表示输入的迷宫， 
char path[1500];//定义存取路径的数组 
string ans;  //没有被初始化，所以它是被调用的默认构造函数----空字符串构造函数（默认构造函数）：构造一个空字符串，长度为零个字符。
char chdir[4] = {'D', 'L', 'R', 'U'}; 
int dir[4][2] = { //走向 
	{0, 1},     //向下走一步
	{-1, 0},    //向左走一步
	{1, 0},      //向右走一步
	{0, -1}     //向上走一步
};


void dfs(int startx, int starty, int step) {
	if (step > minn) return;//剪枝：当已走步数大于已到达终点的最少步数时回溯 
	if (starty == 29 && startx == 49) { //这里我们可以选择两种方法，第一种是按题意来的正宗，第二种略带投机取巧成分（因为我就是按D、L、R、U走的，第一个到达终点的字典序必为最小，这也是我设置chdir顺序的原因） 
//		string temp;
//		for(int i=1;i<pos;i++)
//			temp+=a[i];
//		if(pos<best) {//是最短的路
//			ans=temp;
//			best=pos;
//		}
//		else if(pos==best&&temp<ans)	ans=temp;//在实现路时最短的同时，保证字典序最小。
		if (step < minn) { //只有当步数小于最小步数记录时才更新（等于时不更新，因为定义的走向就是字典序最小） 
			minn = step;
			string temp;
			for (int i = 1; i < step; ++i) temp += path[i];
			ans = temp;
		} 
		return; //回溯
	}
	for (int i = 0; i < 4; ++i) {
		int nextx = startx + dir[i][0];
		int nexty = starty + dir[i][1]; 
		if (maze[nexty][nextx] != 1 && nextx >= 0 && nextx <= 49 && nexty >= 0 && nexty <= 29) {
			if (step + 1 > maze_min[nexty][nextx]) return;//剪枝：当下一步的步数大于下一步记录最短步数时，回溯 
			maze_min[nexty][nextx] = step + 1;
			path[step] = chdir[i];
			maze[nexty][nextx] = 1;//走过的地方设为障碍物 
			dfs(nextx, nexty, step + 1);
			maze[nexty][nextx] = 0;//回溯时恢复
		}
	}
}


int main() {
	int startx = 0, starty = 0; 
	for (int i = 0; i < 30; ++i) {     //输入(不知道为什么把char改成int再复制粘贴数据到命令行窗口读取不完全！)
		for (int j = 0; j < 50; ++j) {
			char t;
			cin >> t;
			maze[i][j] = t - '0';
		}
	}
	memset(maze_min, expo, sizeof(maze_min)); //memset表示将数组的所有值初始化为10^6（在头文件cstring中） 
	maze[starty][startx] = 1;   //起点标记为1(表示已走，变为障碍物)
	dfs(startx, starty, 1); //深度优先算法，调入起点和步数 
	cout << ans << endl; //输出走到终点的最短路径 
//	cout << minn - 1 << endl;// 输出最少步数 
	return 0;
} 

2.bfs:
//假定向右为X正方向、向下为Y正方向
#include <iostream>
#include <queue>
using namespace std;

 
int maze[40][60];//maze数组表示输入的迷宫， 
char chdir[4] = {'D', 'L', 'R', 'U'}; 
int dir[4][2] = { //走向 
	{0, 1},     //向下走一步
	{-1, 0},    //向左走一步
	{1, 0},      //向右走一步
	{0, -1}     //向上走一步
};
struct point {
	int x, y;
	string ans;
	point(int a, int b, string c): x(a), y(b), ans(c) {}
};

void bfs(int startx, int starty) {
	queue <point> q;
	q.push(point(startx, starty, " "));
	while (!q.empty()) {
		point temp = q.front();
		q.pop();
		if (temp.x == 49 && temp.y == 29) {
			temp.ans.erase(0, 1);//删除从下标为0开始的位置的连续1个字符 
			cout << temp.ans << endl;
			cout << temp.ans.length() << endl;
			return;
		}
		for (int i = 0; i < 4; ++i) {
			int nextx = temp.x + dir[i][0];
			int nexty = temp.y + dir[i][1]; 
			if (maze[nexty][nextx] != 1 && nextx >= 0 && nextx <= 49 && nexty >= 0 && nexty <= 29) {
				maze[nexty][nextx] = 1;//走过的地方设为障碍物 
				q.push(point(nextx, nexty, temp.ans + chdir[i]));
		}
	}
	}
}


int main() {
	int startx = 0, starty = 0; 
	for (int i = 0; i < 30; ++i) {     //输入(不知道为什么把char改成int再复制粘贴数据到命令行窗口读取不完全！)
		for (int j = 0; j < 50; ++j) {
			char t;
			cin >> t;
			maze[i][j] = t - '0';
		}
	}
	maze[starty][startx] = 1;   //起点标记为1(表示已走，变为障碍物)
	bfs(startx, starty); //深度优先算法，调入起点和步数 
	return 0;
} 
