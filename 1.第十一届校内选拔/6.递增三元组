【问题描述】
在数列 a[1], a[2], ..., a[n] 中，如果对于下标 i, j, k 满足 0<i<j<k<n+1 且 a[i]<a[j]<a[k]，则称 a[i], a[j], a[k] 为一组递增三元组，a[j]为递增三元组的中心。
给定一个数列，请问数列中有多少个元素可能是递增三元组的中心。
【输入格式】
输入的第一行包含一个整数 n。
第二行包含 n 个整数 a[1], a[2], ..., a[n]，相邻的整数间用空格分隔，表示给定的数列。
【输出格式】
输出一行包含一个整数，表示答案。
【样例输入】
5
1 2 5 3 5
【样例输出】
2
【样例说明】
a[2] 和 a[4] 可能是三元组的中心。
【评测用例规模与约定】
对于 50% 的评测用例，2 <= n <= 100，0 <= 数列中的数 <= 1000。
对于所有评测用例，2 <= n <= 1000，0 <= 数列中的数 <= 10000。

解：
1.我写的：三重循环：
#include <iostream>
using namespace std;


int main() {
	int n, count = 0;//a[n]不能写在这里面，不然n的值会出错
	cin >> n;
	int a[n];
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	for (int j = 1; j < n - 1; ++j) {//扫描中心 
		int flag = 0;//标志位，标记j是否已被记过数 
		for (int i = 0; i < j; ++i) {//扫描中心的左边 
			if (flag) break;//被标记过的话直接开始下一个数 
			for (int k = j + 1; k < n; ++k) {//扫描中心的右边 
				if (a[i] < a[j] && a[j] < a[k]) {//a[i] < a[j] < a[k] 不可以直接这样写在表达式里面（就因为这里搞了一会！） 
					count++;
					flag = 1;//已标记 
					break;
				}
			}
		}
	}
	cout << count << endl;
	return 0;
} 
2.借鉴别人的思路1：一重循环：
/*解题思路：
1.用 min_a 维护 i 前面出现过的最小值；
2.用 max_a 维护 i 后面出现过的最大值；
*/
#include <iostream>
#include <cstring> //memset函数对应的头文件 
using namespace std;
const int N = 1001;


int main() {
	int n, count = 0, min_a[N], max_a[N];
	cin >> n;
	int a[n];
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	memset(min_a, 10001, sizeof(min_a));
	memset(max_a, 0, sizeof(max_a));
	min_a[0] = a[0];
	for (int i = 1; i < n - 2; ++i) min_a[i] = min(min_a[i - 1], a[i]);
	for (int i = n - 1; i >= 2; --	i) max_a[i] = max(max_a[i + 1], a[i]);
	for (int i = 1; i < n; ++ i) {
		if (a[i] > min_a[i - 1] && a[i] < max_a[i + 1]) count++;
	}
	cout << count << endl;
	return 0;
} 
3.借鉴别人的思路2：二重循环：
#include <iostream>
using namespace std;


int main() {
	int n, count = 0;
	cin >> n;
	int a[n];
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	for (int i = 1; i < n - 1; ++ i) {
		int flag1 = 0, flag2 = 0;
		for (int j = 0; j < i; ++j) 
			if (a[i] > a[j]) {
				flag1 = 1;
				break;
			}
		for (int j = i + 1; j < n; ++j) 
			if (a[i] < a[j]) {
				flag2 = 1;
				break;
			}
		if (flag1 && flag2) count++;
	}
	cout << count << endl;
	return 0;
} 
