【问题描述】
小明有一块空地，他将这块空地划分为 n 行 m 列的小块，每行和每列的长度都为 1。
小明选了其中的一些小块空地，种上了草，其他小块仍然保持是空地。
这些草长得很快，每个月，草都会向外长出一些，如果一个小块种了草，则它将向自己的上、下、左、右四小块空地扩展，这四小块空地都将变为有草的小块。
请告诉小明，k 个月后空地上哪些地方有草。
【输入格式】
输入的第一行包含两个整数 n, m。
接下来 n 行，每行包含 m 个字母，表示初始的空地状态，字母之间没有空格。如果为小数点，表示为空地，如果字母为 g，表示种了草。
接下来包含一个整数 k。
【输出格式】
输出 n 行，每行包含 m 个字母，表示 k 个月后空地的状态。如果为小数点，表示为空地，如果字母为 g，表示长了草。
【样例输入】
4 5
.g...
.....
..g..
.....
2
【样例输出】
gggg.
gggg.
ggggg
.ggg.
【评测用例规模与约定】
对于 30% 的评测用例，2 <= n, m <= 20。
对于 70% 的评测用例，2 <= n, m <= 100。
对于所有评测用例，2 <= n, m <= 1000，1 <= k <= 1000。


解：bfs问题
//假设左上角为原点，向右为x正方向，向下为y正方向 
#include <iostream>
#include <queue>
using namespace std;


int n, m, k;
char land[1000][1000];
struct node {
	int x, y;
};
int dir[4][2] {
	{-1, 0},//向左 
	{0, -1},//向上 
	{1, 0},//向右 
	{0, 1}//向下 
};


void solution() {
	queue <node> q;
	for (int i = 0; i < n; ++i) { //找到初始状态下长草的坐标并放入队列 
		for (int j = 0; j < m; ++j) {
			if (land[i][j] == 'g') {
				node g;
				g.x = j;
				g.y = i;
				q.push(g);
			}
		}
	}
	int temp_size = q.size();
	while (k--) {
		for (int j = 0; j < temp_size; ++j) {//把当月的长了草的土地从队列中取完 
			node temp = q.front();
			q.pop();
			node newn;
			for (int i = 0; i <4; ++i) {
				newn.x = temp.x + dir[i][0];
				newn.y = temp.y + dir[i][1];
				if (land[newn.y][newn.x] == '.' && newn.x >= 0 && newn.y >= 0 && newn.x < m && newn.y < n) {
					q.push(newn);
					land[newn.y][newn.x] = 'g';
				}
			}
		}
		temp_size = q.size();//更新下个月长了草的土地 
	}
}


int main() {
	cin >> n >> m;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cin >> land[i][j];
		}
	}
	cin >> k;
	solution();
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < m; ++j) {
			cout << land[i][j];
		}
		cout << endl;
	}
	return 0;
}
